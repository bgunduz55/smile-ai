{
  "name": "smile-ai",
  "displayName": "Smile AI",
  "description": "A local AI developer assistant for VS Code",
  "version": "0.0.1",
  "publisher": "bgund",
  "repository": {
    "type": "git",
    "url": "https://github.com/bgund/smile-ai"
  },
  "engines": {
    "vscode": "^1.86.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onView:smile-ai.mainView",
    "*"
  ],
  "main": "./dist/extension.js",
  "dependencies": {
    "@anthropic-ai/sdk": "^0.36.3",
    "@vscode/codicons": "^0.0.35",
    "axios": "^1.7.9",
    "openai": "^4.83.0"
  },
  "devDependencies": {
    "@angular/compiler-cli": "^19.1.5",
    "@babel/parser": "^7.26.8",
    "@babel/traverse": "^7.26.8",
    "@babel/types": "^7.26.8",
    "@types/glob": "^8.1.0",
    "@types/minimatch": "^5.1.2",
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/vscode": "^1.86.0",
    "@typescript-eslint/eslint-plugin": "^6.19.1",
    "@typescript-eslint/parser": "^6.19.1",
    "@vscode/codicons": "^0.0.36",
    "@vscode/test-cli": "^0.0.4",
    "@vscode/test-electron": "^2.3.9",
    "@vue/compiler-dom": "^3.5.13",
    "@vue/compiler-sfc": "^3.5.13",
    "copy-webpack-plugin": "^12.0.2",
    "crypto-browserify": "^3.12.1",
    "css-loader": "^7.1.2",
    "eslint": "^8.56.0",
    "glob": "^10.3.10",
    "mocha": "^10.2.0",
    "path-browserify": "^1.0.1",
    "stream-browserify": "^3.0.0",
    "style-loader": "^4.0.0",
    "svelte": "^5.19.9",
    "ts-loader": "^9.5.1",
    "typescript": "^5.3.3",
    "util": "^0.12.5",
    "vm-browserify": "^1.1.2",
    "webpack": "^5.90.0",
    "webpack-cli": "^5.1.4"
  },
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "smile-ai",
          "title": "Smile AI",
          "icon": "media/icon.svg"
        }
      ]
    },
    "views": {
      "smile-ai": [
        {
          "type": "webview",
          "id": "smile-ai.mainView",
          "name": "Smile AI",
          "icon": "$(hubot)",
          "contextualTitle": "Smile AI",
          "visibility": "visible"
        }
      ]
    },
    "commands": [
      {
        "command": "smile-ai.switchToChat",
        "title": "Chat",
        "category": "Smile AI",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "smile-ai.switchToComposer",
        "title": "Composer",
        "category": "Smile AI",
        "icon": "$(edit)"
      },
      {
        "command": "smile-ai.switchToSuggestions",
        "title": "Suggestions",
        "category": "Smile AI",
        "icon": "$(lightbulb)"
      },
      {
        "command": "smile-ai.switchToRules",
        "title": "Rules",
        "category": "Smile AI",
        "icon": "$(book)"
      },
      {
        "command": "smile-ai.switchToSettings",
        "title": "Settings",
        "category": "Smile AI",
        "icon": "$(gear)"
      },
      {
        "command": "smile-ai.codeCompletion",
        "title": "Code Completion",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.codeAnalysis",
        "title": "Code Analysis",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.generateCode",
        "title": "Generate Code",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.generateDocs",
        "title": "Generate Docs",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.generateTests",
        "title": "Generate Tests",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.refactorCode",
        "title": "Refactor Code",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.fixBug",
        "title": "Fix Bug",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.createRule",
        "title": "Create New Rule Set",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.editRule",
        "title": "Edit Rule Set",
        "category": "Smile AI"
      },
      {
        "command": "smile-ai.viewRules",
        "title": "View Rules",
        "category": "Smile AI"
      }
    ],
    "keybindings": [
      {
        "command": "smile-ai.openChat",
        "key": "ctrl+shift+a",
        "mac": "cmd+shift+a"
      },
      {
        "command": "smile-ai.startComposer",
        "key": "ctrl+shift+c",
        "mac": "cmd+shift+c"
      },
      {
        "command": "smile-ai.switchView",
        "key": "ctrl+tab",
        "mac": "cmd+tab",
        "when": "activeViewContainer == smile-ai-sidebar"
      }
    ],
    "configuration": {
      "title": "Smile AI",
      "properties": {
        "smile-ai.provider": {
          "type": "string",
          "default": "ollama",
          "enum": [
            "ollama",
            "openai",
            "anthropic",
            "lmstudio",
            "localai",
            "deepseek",
            "qwen"
          ],
          "description": "Active AI provider"
        },
        "smile-ai.ollama": {
          "type": "object",
          "title": "Ollama Configuration",
          "properties": {
            "endpoint": {
              "type": "string",
              "default": "http://localhost:11434",
              "description": "Ollama API endpoint"
            },
            "model": {
              "type": "string",
              "description": "Active Ollama model"
            },
            "models": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Available Ollama models",
              "scope": "machine"
            },
            "activeModels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Active Ollama models",
              "scope": "machine"
            }
          }
        },
        "smile-ai.ollama.endpoint": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "Ollama API endpoint"
        },
        "smile-ai.ollama.model": {
          "type": "string",
          "description": "Active Ollama model"
        },
        "smile-ai.ollama.models": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Available Ollama models"
        },
        "smile-ai.ollama.activeModels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Active Ollama models"
        },
        "smile-ai.openai.apiKey": {
          "type": "string",
          "description": "OpenAI API key"
        },
        "smile-ai.openai.model": {
          "type": "string",
          "description": "Active OpenAI model"
        },
        "smile-ai.openai.activeModels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Active OpenAI models"
        },
        "smile-ai.anthropic.apiKey": {
          "type": "string",
          "description": "Anthropic API key"
        },
        "smile-ai.anthropic.model": {
          "type": "string",
          "description": "Active Anthropic model"
        },
        "smile-ai.anthropic.activeModels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Active Anthropic models"
        },
        "smile-ai.deepseek.apiKey": {
          "type": "string",
          "description": "Deepseek API key"
        },
        "smile-ai.deepseek.model": {
          "type": "string",
          "description": "Active Deepseek model"
        },
        "smile-ai.deepseek.activeModels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Active Deepseek models"
        },
        "smile-ai.qwen.apiKey": {
          "type": "string",
          "description": "Qwen API key"
        },
        "smile-ai.qwen.model": {
          "type": "string",
          "description": "Active Qwen model"
        },
        "smile-ai.qwen.activeModels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Active Qwen models"
        },
        "smile-ai.temperature": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "description": "Temperature for response generation"
        },
        "smile-ai.maxTokens": {
          "type": "number",
          "default": 2048,
          "minimum": 1,
          "description": "Maximum tokens for response generation"
        },
        "smile-ai.modelSettings": {
          "type": "object",
          "properties": {
            "ollama": {
              "type": "object",
              "properties": {
                "modelPath": {
                  "type": "string",
                  "description": "Ollama model file path"
                },
                "apiEndpoint": {
                  "type": "string",
                  "default": "http://localhost:11434",
                  "description": "Ollama API endpoint"
                }
              }
            },
            "llamacpp": {
              "type": "object",
              "properties": {
                "modelPath": {
                  "type": "string",
                  "description": "LlamaCpp model file path"
                }
              }
            },
            "openai": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "OpenAI API key"
                },
                "model": {
                  "type": "string",
                  "default": "gpt-4",
                  "description": "OpenAI model"
                }
              }
            },
            "anthropic": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Anthropic API key"
                },
                "model": {
                  "type": "string",
                  "default": "claude-3-opus-20240229",
                  "description": "Anthropic model"
                }
              }
            }
          }
        },
        "smile-ai.modelParameters": {
          "type": "object",
          "properties": {
            "temperature": {
              "type": "number",
              "default": 0.7,
              "description": "Model temperature value (0-1)"
            },
            "maxTokens": {
              "type": "number",
              "default": 2048,
              "description": "Maximum token count"
            },
            "contextSize": {
              "type": "number",
              "default": 4096,
              "description": "Model context size"
            }
          }
        },
        "smile-ai.contextSize": {
          "type": "number",
          "default": 4096,
          "description": "Model context size"
        },
        "smile-ai.gpu.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable GPU usage"
        },
        "smile-ai.gpu.layers": {
          "type": "number",
          "default": 32,
          "description": "Number of layers to run on GPU"
        },
        "smile-ai.gpu.device": {
          "type": "string",
          "default": "cuda",
          "enum": [
            "cuda",
            "metal",
            "directml"
          ],
          "description": "GPU device to use"
        },
        "smile-ai.performance.batchSize": {
          "type": "number",
          "default": 512,
          "description": "Model batch size"
        },
        "smile-ai.performance.threads": {
          "type": "number",
          "default": 4,
          "description": "Number of CPU threads to use"
        },
        "smile-ai.performance.useMlock": {
          "type": "boolean",
          "default": true,
          "description": "Lock the model memory to improve performance"
        },
        "smile-ai.performance.useMemorymap": {
          "type": "boolean",
          "default": true,
          "description": "Use memory mapping to optimize memory usage"
        },
        "smile-ai.caching.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable caching of model outputs"
        },
        "smile-ai.caching.maxSize": {
          "type": "number",
          "default": 1073741824,
          "description": "Maximum cache size (bytes)"
        },
        "smile-ai.caching.ttl": {
          "type": "number",
          "default": 3600000,
          "description": "Cache entry lifetime (ms)"
        },
        "smile-ai.lmstudio": {
          "type": "object",
          "title": "LM Studio Yapılandırması",
          "properties": {
            "endpoint": {
              "type": "string",
              "default": "http://localhost:1234/v1",
              "description": "LM Studio API endpoint address"
            },
            "model": {
              "type": "string",
              "description": "Active LM Studio model"
            },
            "models": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Available LM Studio models"
            },
            "activeModels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Active LM Studio models"
            },
            "temperature": {
              "type": "number",
              "default": 0.7,
              "minimum": 0,
              "maximum": 1,
              "description": "Model temperature value"
            }
          }
        },
        "smile-ai.localai": {
          "type": "object",
          "title": "LocalAI Configuration",
          "properties": {
            "endpoint": {
              "type": "string",
              "default": "http://localhost:8080/v1",
              "description": "LocalAI API endpoint address"
            },
            "model": {
              "type": "string",
              "description": "Active LocalAI model"
            },
            "models": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Available LocalAI models"
            },
            "activeModels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Active LocalAI models"
            }
          }
        },
        "smile-ai.deepseek": {
          "type": "object",
          "title": "Deepseek Yapılandırması",
          "properties": {
            "endpoint": {
              "type": "string",
              "default": "https://api.deepseek.com/v1",
              "description": "Deepseek API endpoint address"
            },
            "apiKey": {
              "type": "string",
              "description": "Deepseek API key"
            },
            "model": {
              "type": "string",
              "default": "deepseek-coder-33b-instruct",
              "enum": [
                "deepseek-coder-33b-instruct",
                "deepseek-coder-6.7b-instruct",
                "deepseek-coder-1.3b-instruct"
              ],
              "description": "Model to use"
            },
            "temperature": {
              "type": "number",
              "default": 0.7,
              "minimum": 0,
              "maximum": 1,
              "description": "Model temperature value"
            },
            "topP": {
              "type": "number",
              "default": 0.9,
              "minimum": 0,
              "maximum": 1,
              "description": "Top-p sampling value"
            },
            "maxTokens": {
              "type": "number",
              "default": 2048,
              "description": "Maximum token count"
            },
            "stopTokens": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "</s>",
                "<s>"
              ],
              "description": "Tokens to stop response generation"
            },
            "systemPrompt": {
              "type": "string",
              "default": "You are a helpful AI assistant specialized in software development.",
              "description": "System prompt"
            },
            "frequencyPenalty": {
              "type": "number",
              "default": 0,
              "minimum": -2,
              "maximum": 2,
              "description": "Word repetition penalty"
            },
            "presencePenalty": {
              "type": "number",
              "default": 0,
              "minimum": -2,
              "maximum": 2,
              "description": "Word repetition penalty"
            }
          }
        },
        "smile-ai.qwen": {
          "type": "object",
          "title": "Qwen Yapılandırması",
          "properties": {
            "endpoint": {
              "type": "string",
              "default": "https://dashscope.aliyuncs.com/api/v1",
              "description": "Qwen API endpoint address"
            },
            "apiKey": {
              "type": "string",
              "description": "Qwen API key"
            },
            "model": {
              "type": "string",
              "default": "qwen2.5-turbo",
              "enum": [
                "qwen2.5-turbo",
                "qwen2.5-pro",
                "qwen1.5-72b",
                "qwen1.5-14b"
              ],
              "description": "Model to use"
            },
            "temperature": {
              "type": "number",
              "default": 0.7,
              "minimum": 0,
              "maximum": 1,
              "description": "Model temperature value"
            },
            "topP": {
              "type": "number",
              "default": 0.9,
              "minimum": 0,
              "maximum": 1,
              "description": "Top-p sampling value"
            },
            "maxTokens": {
              "type": "number",
              "default": 2048,
              "description": "Maximum token count"
            },
            "stopTokens": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "</s>",
                "<s>"
              ],
              "description": "Tokens to stop response generation"
            },
            "systemPrompt": {
              "type": "string",
              "default": "You are a helpful AI assistant specialized in software development.",
              "description": "System prompt"
            },
            "enableSearch": {
              "type": "boolean",
              "default": true,
              "description": "Enable web search feature"
            },
            "seed": {
              "type": "number",
              "description": "Seed value for random number generator"
            },
            "repetitionPenalty": {
              "type": "number",
              "default": 1.1,
              "minimum": 1,
              "maximum": 2,
              "description": "Repetition penalty factor"
            },
            "topK": {
              "type": "number",
              "default": 50,
              "minimum": 1,
              "description": "Top-k sampling value"
            }
          }
        },
        "smile-ai.rules": {
          "type": "object",
          "title": "Smile Rules",
          "properties": {
            "rulesPath": {
              "type": "string",
              "default": ".smile",
              "description": "Path to Smile rules folder"
            },
            "enabledRules": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "code-style",
                "naming",
                "testing",
                "documentation",
                "git",
                "architecture",
                "security",
                "performance"
              ],
              "description": "Active rule sets"
            },
            "customRules": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Rule set name"
                  },
                  "path": {
                    "type": "string",
                    "description": "Path to rule file"
                  },
                  "description": {
                    "type": "string",
                    "description": "Rule set description"
                  }
                }
              },
              "default": [],
              "description": "Custom rule sets"
            },
            "overrides": {
              "type": "object",
              "default": {},
              "description": "Rule overrides"
            }
          }
        },
        "smile-ai.rules.codeStyle": {
          "type": "object",
          "title": "Code Style",
          "properties": {
            "indentSize": {
              "type": "number",
              "default": 4,
              "description": "Indent size"
            },
            "useTabs": {
              "type": "boolean",
              "default": false,
              "description": "Use tabs"
            },
            "maxLineLength": {
              "type": "number",
              "default": 80,
              "description": "Maximum line length"
            },
            "quoteStyle": {
              "type": "string",
              "enum": [
                "single",
                "double"
              ],
              "default": "single",
              "description": "Quote style"
            },
            "semicolons": {
              "type": "boolean",
              "default": true,
              "description": "Use semicolons"
            }
          }
        },
        "smile-ai.rules.naming": {
          "type": "object",
          "title": "Naming",
          "properties": {
            "variables": {
              "type": "string",
              "enum": [
                "camelCase",
                "snake_case",
                "PascalCase"
              ],
              "default": "camelCase",
              "description": "Variable naming style"
            },
            "functions": {
              "type": "string",
              "enum": [
                "camelCase",
                "snake_case",
                "PascalCase"
              ],
              "default": "camelCase",
              "description": "Function naming style"
            },
            "classes": {
              "type": "string",
              "enum": [
                "camelCase",
                "snake_case",
                "PascalCase"
              ],
              "default": "PascalCase",
              "description": "Class naming style"
            },
            "interfaces": {
              "type": "string",
              "enum": [
                "camelCase",
                "snake_case",
                "PascalCase"
              ],
              "default": "PascalCase",
              "description": "Interface naming style"
            },
            "constants": {
              "type": "string",
              "enum": [
                "camelCase",
                "snake_case",
                "PascalCase",
                "UPPER_CASE"
              ],
              "default": "UPPER_CASE",
              "description": "Constant naming style"
            }
          }
        },
        "smile-ai.rules.testing": {
          "type": "object",
          "title": "Test Rules",
          "properties": {
            "required": {
              "type": "boolean",
              "default": true,
              "description": "Test requirement"
            },
            "coverage": {
              "type": "object",
              "properties": {
                "statements": {
                  "type": "number",
                  "default": 80,
                  "description": "Statement coverage percentage"
                },
                "branches": {
                  "type": "number",
                  "default": 70,
                  "description": "Branch coverage percentage"
                },
                "functions": {
                  "type": "number",
                  "default": 80,
                  "description": "Function coverage percentage"
                },
                "lines": {
                  "type": "number",
                  "default": 80,
                  "description": "Line coverage percentage"
                }
              }
            }
          }
        },
        "smile-ai.rules.documentation": {
          "type": "object",
          "title": "Documentation",
          "properties": {
            "required": {
              "type": "boolean",
              "default": true,
              "description": "Documentation requirement"
            },
            "style": {
              "type": "string",
              "enum": [
                "JSDoc",
                "TSDoc",
                "docstring",
                "custom"
              ],
              "default": "JSDoc",
              "description": "Documentation style"
            },
            "requireParams": {
              "type": "boolean",
              "default": true,
              "description": "Parameter documentation requirement"
            },
            "requireReturns": {
              "type": "boolean",
              "default": true,
              "description": "Return value documentation requirement"
            }
          }
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "pnpm": {
    "ignoredBuiltDependencies": [
      "sqlite3"
    ]
  }
}
